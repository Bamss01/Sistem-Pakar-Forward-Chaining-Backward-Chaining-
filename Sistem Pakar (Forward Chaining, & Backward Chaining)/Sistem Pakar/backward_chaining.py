# -*- coding: utf-8 -*-
"""Backward Chaining

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CmE8oU-jb8UGvNsGAshiBAi9f6YUxWXy
"""

def backward_chaining(goal, facts, rules):
  if goal in facts:
    return True
  for rule in rules:
    if rule["then"] == goal:
      if all(backward_chaining(cond, facts, rules) for cond in rule["if"]):
        return True
  return False

facts = {"likes_computers", "solves_problems", "likes_to_design"}
rules = [
    {"if": {"likes_computers", "solves_problems"}, "then": "should_be_engineer"},
    {"if": {"should_be_engineer", "likes_programming"}, "then": "software_engineer"},
    {"if": {"should_be_engineer", "likes_to_design"}, "then": "UI/UX_engineer"},
]

goal = "UI/UX_engineer"
result = backward_chaining(goal, facts, rules)
print(f"is '{goal}' provable? ->", result)

def backward_chaining(goal, facts, rules):
  if goal in facts:
    return True
  for rule in rules:
    if rule["then"] == goal:
      if all(backward_chaining(cond, facts, rules) for cond in rule["if"]):
        return True
  return False

facts = {"has_feathers, has_small_wings"}
rules = [
    {"if": {"is_bird", "cannot_fly"}, "then": "is_penguin"},
    {"if": {"has_feathers"}, "then": "is_bird"},
    {"if": {"has_small_wings"}, "then": "cannot_fly"},
]

goal = "is_penguin"
result = backward_chaining(goal, facts, rules)
print(f"is '{goal}' provable? ->", result)