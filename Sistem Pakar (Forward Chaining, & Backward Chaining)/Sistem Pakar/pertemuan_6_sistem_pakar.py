# -*- coding: utf-8 -*-
"""Pertemuan 6_Sistem Pakar

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S-nrAemqQXAd1acY10sxRMsdRm4zumwF
"""

!pip install experta

!pip install --upgrade frozendict

from experta import *

class Diagnosis(KnowledgeEngine):
    @Rule(Fact(cough=True) & Fact(fever=True) & Fact(fatigue=True))
    def flu(self):
        print("Diagnosis: You may have the flu.")

    @Rule(Fact(cough=True) & Fact(fever=True) & Fact(breathing_difficulty=True))
    def pneumonia(self):
        print("Diagnosis: You may have pneumonia.")

    @Rule(Fact(sneezing=True) & Fact(runny_nose=True) & Fact(cough=False))
    def cold(self):
        print("Diagnosis: You may have a common cold.")

    @Rule(Fact(sore_throat=True) & Fact(fever=True))
    def throat_infection(self):
        print("Diagnosis: You may have a throat infection.")

    @Rule(Fact(cough=False) & Fact(fever=False) & Fact(fatigue=False))
    def healthy(self):
        print("Diagnosis: You seem to be healthy.")

    @Rule(Fact(stomachache=True) & Fact(nausea=True) & Fact(diarrhea=True))
    def food_poisoning(self):
        print("Diagnosis: You may have food poisoning.")

    # Tambahan penyakit:
    @Rule(Fact(headache=True) & Fact(nausea=True) & Fact(sensitivity_to_light=True))
    def migraine(self):
        print("Diagnosis: You may have a migraine.")

    @Rule(Fact(fever=True) & Fact(headache=True) & Fact(joint_pain=True))
    def dengue(self):
        print("Diagnosis: You may have dengue fever.")

    @Rule(Fact(cough=True) & Fact(fever=True) & Fact(loss_of_smell=True))
    def covid(self):
        print("Diagnosis: You may have COVID-19.")

    @Rule(Fact(sneezing=True) & Fact(runny_nose=True) & Fact(itchy_eyes=True))
    def allergy(self):
        print("Diagnosis: You may have an allergy.")


def get_input():
    """Helper function to get user input as boolean (yes/no)."""
    def ask_question(question):
        return input(question + " (yes/no): ").strip().lower() == "yes"

    return {
        "cough": ask_question("Do you have a cough?"),
        "fever": ask_question("Do you have a fever?"),
        "fatigue": ask_question("Do you feel fatigued?"),
        "breathing_difficulty": ask_question("Do you have breathing difficulties?"),
        "sneezing": ask_question("Are you sneezing?"),
        "runny_nose": ask_question("Do you have a runny nose?"),
        "sore_throat": ask_question("Do you have a sore throat?"),
        "stomachache": ask_question("Do you have a stomachache?"),
        "nausea": ask_question("Do you feel nauseous?"),
        "diarrhea": ask_question("Do you have diarrhea?"),
        # Gejala tambahan
        "headache": ask_question("Do you have a headache?"),
        "sensitivity_to_light": ask_question("Are you sensitive to light?"),
        "joint_pain": ask_question("Do you have joint pain?"),
        "loss_of_smell": ask_question("Have you lost your sense of smell?"),
        "itchy_eyes": ask_question("Do you have itchy eyes?")
    }

# Menjalankan sistem pakar
if __name__ == "__main__":
    symptoms = get_input()
    engine = Diagnosis()
    engine.reset()  # Reset the knowledge engine

    for symptom, present in symptoms.items():
        engine.declare(Fact(**{symptom: present}))  # Declare facts
    engine.run()  # Run the inference engine

from experta import *

class SistemPakarMedis(KnowledgeEngine):

    @Rule(Fact(demam=True) & Fact(batuk=True))
    def flu(self):
        print("Diagnosis: Flu.")

    @Rule(Fact(sakit_tenggorokan=True) & Fact(demam=True))
    def throat_infection(self):
        print("Diagnosis: Radang Tenggorokan.")

    @Rule(Fact(nyeri_otot=True) & Fact(nyeri_perut=True))
    def hernia(self):
        print("Diagnosis: Hernia. Innalillahi.")

    @Rule(Fact(kanker=True) & Fact(tbc=True) & Fact(tipus=True) & Fact(tumor=True))
    def mati(self):
        print("Diagnosis: Anda mengalami kondisi serius. Segera hubungi tenaga medis!")

    @Rule(Fact(sakit_kepala=True) & Fact(mual=True) & Fact(sensitif_cahaya=True))
    def migrain(self):
        print("Diagnosis: Anda mungkin mengalami migrain.")

    @Rule(Fact(demam=True) & Fact(sakit_kepala=True) & Fact(nyeri_sendi=True))
    def dbd(self):
        print("Diagnosis: Kemungkinan Anda terkena Demam Berdarah (DBD). Segera periksa ke dokter.")

    @Rule(Fact(demam=True) & Fact(batuk=True) & Fact(kehilangan_penciuman=True))
    def covid(self):
        print("Diagnosis: Gejala mengarah pada COVID-19. Lakukan tes dan isolasi mandiri.")

    @Rule(Fact(bersin=True) & Fact(hidung_berair=True) & Fact(mata_gatal=True))
    def alergi(self):
        print("Diagnosis: Anda mungkin mengalami alergi.")

# Contoh menjalankan sistem dengan gejala berat
if __name__ == "__main__":
    engine = SistemPakarMedis()
    engine.reset()

    # Silakan ubah fakta sesuai gejala yang ingin diuji:
    engine.declare(Fact(demam=True))
    engine.declare(Fact(batuk=True))
    engine.declare(Fact(kehilangan_penciuman=True))
    engine.declare(Fact(sakit_kepala=True))
    engine.declare(Fact(mual=True))
    engine.declare(Fact(sensitif_cahaya=True))
    engine.declare(Fact(bersin=True))
    engine.declare(Fact(hidung_berair=True))
    engine.declare(Fact(mata_gatal=True))

    engine.run()

def forward_chaining(facts, rules):
  inferred = set(facts)
  changed = True
  while changed:
    changed = False
    for rule in rules:
      if rule["if"].issubset(inferred) and rule["then"] not in inferred:
        inferred.add(rule["then"])
        changed = True
  return inferred

facts = {"has_feathers", "has_beak", "carnivore"}
rules = [
    {"if": {"has_feathers", "has_beak"}, "then": "is_bird"},
    {"if": {"lays_eggs", "is_bird"}, "then": "is_chicken"},
    {"if": {"cannot_fly", "is_bird"}, "then": "is_penguin"},
    {"if": {"carnivore", "is_bird"}, "then": "is_eagle"}
]

result = forward_chaining(facts, rules)
print("inferred facts:", result)

"""**Backward Chaining**"""

def backward_chaining(goal, facts, rules):
  if goal in facts:
    return True
  for rule in rules:
    if rule["then"] == goal:
      if all(backward_chaining(cond, facts, rules) for cond in rule["if"]):
        return True
  return False

facts = {"likes_computers", "solves_problems", "likes_to_design"}
rules = [
    {"if": {"likes_computers", "solves_problems"}, "then": "should_be_engineer"},
    {"if": {"should_be_engineer", "likes_programming"}, "then": "software_engineer"},
    {"if": {"should_be_engineer", "likes_to_design"}, "then": "UI/UX_engineer"},
]

goal = "UI/UX_engineer"
result = backward_chaining(goal, facts, rules)
print(f"is '{goal}' provable? ->", result)

"""SOAL Forward Chaining

buatlah 2 variable (facts dan rules)

Facts: has_wheels, has_engine, has_four_wheels Rules:

    if has_wheels and has_engine -> is_vehicle

    if is_vehicle and has_two_wheels -> is_motorcycle

    if is_vehicle and has_four_wheels -> is_car


panggil fungsi forward_chaining dan print hasil inferensi nya
"""

def forward_chaining(facts, rules):
  inferred = set(facts)
  changed = True
  while changed:
    changed = False
    for rule in rules:
      if rule["if"].issubset(inferred) and rule["then"] not in inferred:
        inferred.add(rule["then"])
        changed = True
  return inferred

facts = {"has_wheels, has_engine, has_four_wheels"}
rules = [
    {"if": {"has_wheels", "has_engine"}, "then": "is_vehicle"},
    {"if": {"is_vehicle", "has_two_wheels"}, "then": "is_motorcycle"},
    {"if": {"is_vehicle", "has_four_wheels"}, "then": "is_car"},
]

result = forward_chaining(facts, rules)
print("inferred facts:", result)

def backward_chaining(goal, facts, rules):
  if goal in facts:
    return True
  for rule in rules:
    if rule["then"] == goal:
      if all(backward_chaining(cond, facts, rules) for cond in rule["if"]):
        return True
  return False

facts = {"has_feathers, has_small_wings"}
rules = [
    {"if": {"is_bird", "cannot_fly"}, "then": "is_penguin"},
    {"if": {"has_feathers"}, "then": "is_bird"},
    {"if": {"has_small_wings"}, "then": "cannot_fly"},
]

goal = "is_penguin"
result = backward_chaining(goal, facts, rules)
print(f"is '{goal}' provable? ->", result)